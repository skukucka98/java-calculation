/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package calculation_solitaire.PlayCardWindow;
import calculation_solitaire.Deck;
import calculation_solitaire.Card;
import calculation_solitaire.WastePile;
import calculation_solitaire.FoundationPile;
import java.awt.Color;
import java.awt.Container;
import java.awt.Point;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

public class GameBoard extends javax.swing.JFrame {

    

    @Override
    public void setContentPane(Container contentPane) {
        super.setContentPane(contentPane); //To change body of generated methods, choose Tools | Templates.
    }
    /**
     * Creates new form GameBoard
     */
    public GameBoard() throws IOException {
        this.setContentPane(new JLabel(new ImageIcon(ImageIO.read(new File("images/test.jpg"))    )));
        this.funpile = new int[]{2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 12, 13};
        funpile1=new FoundationPile(funpile);
        this.funpile = new int[]{4, 6, 8, 10, 12, 1, 3, 5, 7, 9, 11, 13};
        funpile2=new FoundationPile(funpile);
        this.funpile = new int[]{6, 9, 12, 2, 5, 8, 11, 1, 4, 7, 10, 13};
        funpile3=new FoundationPile(funpile);
        this.funpile = new int[]{8, 12, 3, 7, 11, 2, 6, 10, 1, 5, 9, 13};
        funpile4=new FoundationPile(funpile);
        deck = new Deck(true);
        wastepile1= new WastePile();
        wastepile2= new WastePile();
        wastepile3= new WastePile();
        wastepile4= new WastePile();
        stockCard = new Card();
        
        deck.printDeck(48);
      
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>  
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        deckPile = new javax.swing.JLabel();
        stockPile = new javax.swing.JLabel();
        wastePileA = new javax.swing.JLabel();
        wastePileB = new javax.swing.JLabel();
        wastePileC = new javax.swing.JLabel();
        wastePileD = new javax.swing.JLabel();
        foundationPile1 = new javax.swing.JLabel();
        foundationPile3 = new javax.swing.JLabel();
        foundationPile2 = new javax.swing.JLabel();
        foundationPile4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        resetBtn = new javax.swing.JButton();
        exitBtn = new javax.swing.JButton();
        helpBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        deckPile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/calculation_solitaire/images/b1fv.png"))); // NOI18N
        deckPile.setToolTipText("");
        deckPile.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        deckPile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deckPileMouseClicked(evt);
            }
        });

        stockPile.setToolTipText("");
        stockPile.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        stockPile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stockPileMouseClicked(evt);
            }
        });

        wastePileA.setToolTipText("");
        wastePileA.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        wastePileA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                wastePileAMouseClicked(evt);
            }
        });

        wastePileB.setToolTipText("");
        wastePileB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        wastePileB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                wastePileBMouseClicked(evt);
            }
        });

        wastePileC.setToolTipText("");
        wastePileC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        wastePileC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                wastePileCMouseClicked(evt);
            }
        });

        wastePileD.setToolTipText("");
        wastePileD.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        wastePileD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                wastePileDMouseClicked(evt);
            }
        });

        foundationPile1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/calculation_solitaire/images/Spades1.png"))); // NOI18N
        foundationPile1.setToolTipText("");
        foundationPile1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        foundationPile1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                foundationPile1MouseClicked(evt);
            }
        });

        foundationPile3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/calculation_solitaire/images/Spades3.png"))); // NOI18N
        foundationPile3.setToolTipText("");
        foundationPile3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        foundationPile3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                foundationPile3MouseClicked(evt);
            }
        });

        foundationPile2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/calculation_solitaire/images/Spades2.png"))); // NOI18N
        foundationPile2.setToolTipText("");
        foundationPile2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        foundationPile2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                foundationPile2MouseClicked(evt);
            }
        });

        foundationPile4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/calculation_solitaire/images/Spades4.png"))); // NOI18N
        foundationPile4.setToolTipText("");
        foundationPile4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        foundationPile4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                foundationPile4MouseClicked(evt);
            }
        });

        jLabel1.setText("<html>A <b>2</b> 3 4 5 6 7 8 9 10 J Q K</html>");

        jLabel2.setText("<html>2 <strong>4</strong> 6 8 10 Q A 3 5 7 9 J K</html>");

        jLabel3.setText("<html>3 <strong>6</strong> 9 Q 2 5 8 J A 4 7 10 K</html>");

        jLabel4.setText("<html>4 <strong>8</strong> Q 3 7 J 2 6 10 A 5 9 K</html>");

        resetBtn.setText("Reset");
        resetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBtnActionPerformed(evt);
            }
        });

        exitBtn.setText("Exit");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        helpBtn.setText("Help");
        helpBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                helpMenu(evt);
            }
        });
        helpBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(deckPile, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(stockPile, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(91, 91, 91)
                                .addComponent(foundationPile1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(68, 68, 68))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(resetBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                                    .addComponent(exitBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(wastePileA, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(65, 65, 65)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(foundationPile2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(90, 90, 90)
                                .addComponent(foundationPile3, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(wastePileB, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(89, 89, 89)
                                .addComponent(wastePileC, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(13, 13, 13)
                                        .addComponent(foundationPile2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(90, 90, 90)
                                        .addComponent(foundationPile3, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(wastePileB, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(89, 89, 89)
                                        .addComponent(wastePileC, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(86, 86, 86)
                                        .addComponent(foundationPile4, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(88, 88, 88)
                                        .addComponent(wastePileD, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(146, 146, 146)
                                .addComponent(jLabel3)
                                .addGap(31, 31, 31)
                                .addComponent(jLabel4))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(helpBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(143, 143, 143)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(386, 386, 386)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(184, 184, 184))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(stockPile, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deckPile, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(foundationPile1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(foundationPile4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(foundationPile3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(foundationPile2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(helpBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(stockPile, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deckPile, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(wastePileA, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wastePileB, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wastePileC, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wastePileD, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(resetBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(exitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 353, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deckPileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deckPileMouseClicked
        if (deck.getSize() == 1) {
            deckPile.setIcon(null);
            deckPile.setSize(71, 96);
        } else if (deck.getSize() == 0) {
            return;
        }     
        if (isSelected1) {
            isSelected1 = false;
            stockPile.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        }
        deselectWastePiles();               
        if (!stockCard.isFaceUp()) {
            stockCard = deck.dealNextCard();
            stockCard.setFaceUp(true);
            stockPile.setIcon(stockCard.getIcon());
            System.out.println("stockCard drawn");
        } else {
            System.out.println("stockCard not drawn");
//            JLabel textLabel = new JLabel("Haha");
//            textLabel.setLocation(600, 600);
//            wastePileA.setLocation(280, 260);
           
        }
    }//GEN-LAST:event_deckPileMouseClicked

    private void foundationPile1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_foundationPile1MouseClicked
        foundationPileSelectionHandler(1);
    }//GEN-LAST:event_foundationPile1MouseClicked

    private void stockPileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stockPileMouseClicked
        if(!isSelected1 && stockCard.isFaceUp() ){      
            pCard = stockCard;
            stockPile.setBorder(BorderFactory.createLineBorder(Color.BLUE, 2));
            isSelected1 = true; 
            System.out.println("Selecting stockCard");
        } else if((isSelected2 || isSelected3 || isSelected5 || isSelected4) && !isSelected1){  
            stockCard.setFaceUp(true);
            pCard = stockCard;
            isSelected1 = true; 
            stockPile.setBorder(BorderFactory.createLineBorder(Color.BLUE, 2));
            wastePileA.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            wastePileB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            wastePileC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            wastePileD.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            isSelected2 = false;
            isSelected3 = false;
            isSelected4 = false;
            isSelected5 = false;
            System.out.println("Selecting stockCard");
        } else {   
            pCard = new Card();
            stockPile.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            isSelected1 = false;
            System.out.println("DeSelecting stockCard");
        }
        deselectWastePiles();  
    }//GEN-LAST:event_stockPileMouseClicked

    private void foundationPile2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_foundationPile2MouseClicked
        foundationPileSelectionHandler(2);
    }//GEN-LAST:event_foundationPile2MouseClicked

    private void foundationPile3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_foundationPile3MouseClicked
        foundationPileSelectionHandler(3);
    }//GEN-LAST:event_foundationPile3MouseClicked

    private void foundationPile4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_foundationPile4MouseClicked
        foundationPileSelectionHandler(4);
    }//GEN-LAST:event_foundationPile4MouseClicked

    private void wastePileDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_wastePileDMouseClicked
        wastePileSelectionHandler(4);
    }//GEN-LAST:event_wastePileDMouseClicked

    private void wastePileCMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_wastePileCMouseClicked
        wastePileSelectionHandler(3);
    }//GEN-LAST:event_wastePileCMouseClicked

    private void wastePileBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_wastePileBMouseClicked
        wastePileSelectionHandler(2);
    }//GEN-LAST:event_wastePileBMouseClicked

    private void wastePileAMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_wastePileAMouseClicked
        wastePileSelectionHandler(1);
    }//GEN-LAST:event_wastePileAMouseClicked

    private void clearBoard() {
        deck = new Deck(true);
        stockCard = new Card();
        wasteCard = new Card();
        foundationCard = new Card();
        pCard = new Card();
        funpile1 = new FoundationPile();
        funpile2 = new FoundationPile();
        funpile3 = new FoundationPile();
        funpile4 = new FoundationPile();
        isSelected1 = false;
        isSelected2 = false;
        isSelected3 = false;
        isSelected4 = false;
        isSelected5 = false;
        wastepile1 = new WastePile();
        wastepile2 = new WastePile();
        wastepile3 = new WastePile();
        wastepile4 = new WastePile();
        deckPile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/calculation_solitaire/images/b1fv.png")));      
        foundationPile1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/calculation_solitaire/images/Spades1.png")));
        foundationPile2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/calculation_solitaire/images/Spades2.png")));
        foundationPile3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/calculation_solitaire/images/Spades3.png")));
        foundationPile4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/calculation_solitaire/images/Spades4.png")));
        stockPile.setIcon(null);
        stockPile.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        wastePileA.setIcon(null);
        wastePileA.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        wastePileB.setIcon(null);
        wastePileB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        wastePileC.setIcon(null);
        wastePileC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        wastePileD.setIcon(null);
        wastePileD.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    }
    private void resetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBtnActionPerformed
        clearBoard();
        this.funpile = new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13};
        funpile1=new FoundationPile(funpile);
        this.funpile = new int[]{2, 4, 6, 8, 10, 12, 1, 3, 5, 7, 9, 11, 13};
        funpile2=new FoundationPile(funpile);
        this.funpile = new int[]{3, 6, 9, 12, 2, 5, 8, 11, 1, 4, 7, 10, 13};
        funpile3=new FoundationPile(funpile);
        this.funpile = new int[]{4, 8, 12, 3, 7, 11, 2, 6, 10, 1, 5, 9, 13};
        funpile4=new FoundationPile(funpile);
        
        deck.printDeck(48);
    }//GEN-LAST:event_resetBtnActionPerformed

    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitBtnActionPerformed

    private void helpBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpBtnActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new HelpFrame().setVisible(true);
                }
            });
    }//GEN-LAST:event_helpBtnActionPerformed

    private void helpMenu(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpMenu
        // TODO add your handling code here:
    }//GEN-LAST:event_helpMenu
     
    public void wastePileSelectionHandler(int pile) {
        if (isSelected1){
            switch (pile) {
                case 1:
                    if(stockCard.isFaceUp()){
                        wastePileA.setIcon(stockCard.getIcon());
                        wastepile1.push(stockCard);
                        stockPile.setIcon(null);
                        isSelected1 = false;
                        stockPile.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                        stockCard.setFaceUp(false);
                        pCard = new Card();
                        System.out.println("Moving stockCard to wastePile1");
                    }
                    break;
                case 2:
                    if(stockCard.isFaceUp()){
                        wastePileB.setIcon(stockCard.getIcon());
                        wastepile2.push(stockCard);
                        stockPile.setIcon(null);
                        isSelected1 = false;
                        stockPile.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                        stockCard.setFaceUp(false);
                        pCard = new Card();
                        System.out.println("Moving stockCard to wastePile2");
                    }
                    break;
                case 3:
                    if(stockCard.isFaceUp()){
                        wastePileC.setIcon(stockCard.getIcon());
                        wastepile3.push(stockCard);
                        stockPile.setIcon(null);
                        isSelected1 = false;
                        stockPile.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                        stockCard.setFaceUp(false);
                        pCard = new Card();
                        System.out.println("Moving stockCard to wastePile3");
                    }
                    break;
                case 4:
                    if(stockCard.isFaceUp()){
                        wastePileD.setIcon(stockCard.getIcon());
                        wastepile4.push(stockCard);
                        stockPile.setIcon(null);
                        isSelected1 = false;
                        stockPile.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                        stockCard.setFaceUp(false);
                        pCard = new Card();
                        System.out.println("Moving stockCard to wastePile4");
                    }
                    break;
                default:
                    System.err.println("Wrong Code");
            }
        }else if (isSelected2){
            switch (pile) {
                case 1:
                    isSelected2 = false;
                    wastePileA.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                    pCard = new Card();
                    System.out.println("Deselecting wastePile1");
                    break;
                case 2:
                    pCard = wastepile2.peek();
                    isSelected2 = false;
                    isSelected3 = true;
                    wastePileB.setBorder(BorderFactory.createLineBorder(Color.BLUE, 2));
                    wastePileA.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                    System.out.println("Deselecting wastePile1, Selecting wastePile2");
                    break;
                case 3:
                    pCard = wastepile3.peek();
                    isSelected2 = false;
                    isSelected4 = true;
                    wastePileC.setBorder(BorderFactory.createLineBorder(Color.BLUE, 2));
                    wastePileA.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                    System.out.println("Deselecting wastePile1, Selecting wastePile3");
                    break;
                case 4:
                    pCard = wastepile4.peek();
                    isSelected2 = false;
                    isSelected5 = true;
                    wastePileD.setBorder(BorderFactory.createLineBorder(Color.BLUE, 2));
                    wastePileA.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                    System.out.println("Deselecting wastePile1, Selecting wastePile4");
                    break;
                default:
                    System.err.println("Wrong Code");
            }
        }else if (isSelected3){
            switch (pile) {
                case 1:
                    pCard = wastepile1.peek();
                    isSelected3 = false;
                    isSelected2 = true;
                    wastePileA.setBorder(BorderFactory.createLineBorder(Color.BLUE, 2));
                    wastePileB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                    System.out.println("Deselecting wastePile2, Selecting wastePile1");
                    break;
                case 2:
                    isSelected3 = false;
                    wastePileB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                    pCard = new Card();
                    System.out.println("Deselecting wastePile2");
                    break;
                case 3:
                    pCard = wastepile3.peek();
                    isSelected3 = false;
                    isSelected4 = true;
                    wastePileC.setBorder(BorderFactory.createLineBorder(Color.BLUE, 2));
                    wastePileB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                    System.out.println("Deselecting wastePile2, Selecting wastePile3");
                    break;
                case 4:
                    pCard = wastepile4.peek();
                    isSelected3 = false;
                    isSelected5 = true;
                    wastePileD.setBorder(BorderFactory.createLineBorder(Color.BLUE, 2));
                    wastePileB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                    System.out.println("Deselecting wastePile2, Selecting wastePile4");
                    break;
                default:
                    System.err.println("Wrong Code");
            }
        }else if (isSelected4){
            switch (pile) {
                case 1:
                    pCard = wastepile1.peek();
                    isSelected4 = false;
                    isSelected2 = true;
                    wastePileA.setBorder(BorderFactory.createLineBorder(Color.BLUE, 2));
                    wastePileC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                    System.out.println("Deselecting wastePile3, Selecting wastePile1");
                    break;
                case 2:
                    pCard = wastepile2.peek();
                    isSelected4 = false;
                    isSelected3 = true;
                    wastePileB.setBorder(BorderFactory.createLineBorder(Color.BLUE, 2));
                    wastePileC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                    System.out.println("Deselecting wastePile3, Selecting wastePile2");
                    break;
                case 3:
                    isSelected4 = false;
                    wastePileC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                    pCard = new Card();
                    System.out.println("Deselecting wastePile3");
                    break;
                case 4:
                    pCard = wastepile4.peek();
                    isSelected4 = false;
                    isSelected5 = true;
                    wastePileD.setBorder(BorderFactory.createLineBorder(Color.BLUE, 2));
                    wastePileC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                    System.out.println("Deselecting wastePile3, Selecting wastePile4");
                    break;
                default:
                    System.err.println("Wrong Code");
            }
        }else if (isSelected5){
            switch (pile) {
                case 1:
                    pCard = wastepile1.peek();
                    isSelected5 = false;
                    isSelected2 = true;
                    wastePileA.setBorder(BorderFactory.createLineBorder(Color.BLUE, 2));
                    wastePileD.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                    System.out.println("Deselecting wastePile4, Selecting wastePile1");
                    break;
                case 2:
                    pCard = wastepile2.peek();
                    isSelected5 = false;
                    isSelected3 = true;
                    wastePileB.setBorder(BorderFactory.createLineBorder(Color.BLUE, 2));
                    wastePileD.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                    System.out.println("Deselecting wastePile4, Selecting wastePile2");
                    break;
                case 3:
                    pCard = wastepile3.peek();
                    isSelected5 = false;
                    isSelected4 = true;
                    wastePileC.setBorder(BorderFactory.createLineBorder(Color.BLUE, 2));
                    wastePileD.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                    System.out.println("Deselecting wastePile4, Selecting wastePile3");
                    break;
                case 4:
                    isSelected5 = false;
                    wastePileD.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                    pCard = new Card();
                    System.out.println("Deselecting wastePile4");
                    break;
                default:
                    System.err.println("Wrong Code");
            }
        }else {
            switch (pile) {
                case 1:
                    pCard = wastepile1.peek();
                    stockCard.setFaceUp(false);
                    isSelected2 = true;
                    wastePileA.setBorder(BorderFactory.createLineBorder(Color.BLUE, 2));
                    System.out.println("Selecting wastePile1");
                    break;
                case 2:
                    pCard = wastepile2.peek();
                    stockCard.setFaceUp(false);
                    isSelected3 = true;
                    wastePileB.setBorder(BorderFactory.createLineBorder(Color.BLUE, 2));
                    System.out.println("Selecting wastePile2");
                    break;
                case 3:
                    pCard = wastepile3.peek();
                    stockCard.setFaceUp(false);
                    isSelected4 = true;
                    wastePileC.setBorder(BorderFactory.createLineBorder(Color.BLUE, 2));
                    System.out.println("Selecting wastePile3");
                    break;
                case 4:
                    pCard = wastepile4.peek();
                    stockCard.setFaceUp(false);
                    isSelected5 = true;
                    wastePileD.setBorder(BorderFactory.createLineBorder(Color.BLUE, 2));
                    System.out.println("Selecting wastePile4");
                    break;
                default:
                    System.err.println("Wrong Code");
            }
        }
    }
    
    private void checkWinCon(){
        if (funpile1.isFull() && funpile2.isFull() && funpile3.isFull() && funpile4.isFull()) {
            /* Create and display the form */
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new WinGame().setVisible(true);
                }
            });
        }
    }
    
    public void foundationPileSelectionHandler(int pile) {
        switch (pile) {
            case 1:
                if(isSelected1){
                    if(this.funpile1.validFoundation(pCard.getValue())){ 
                        pCard.setFaceUp(true);
                        foundationPile1.setIcon(pCard.getIcon()); 
                        pCard.setFaceUp(false);
                        isSelected1 = false;   
                        stockPile.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                        stockPile.setIcon(null);
                        pCard = new Card();
                        System.out.println("Moving card from stockPile to foundationPile1");
                        checkWinCon();
                        adjustHelpLabel(jLabel1, funpile1);
                    }else{
                        JOptionPane.showMessageDialog(this, "You cannot move the card this way.");
                    }
                } else if(isSelected2){
                    if(this.funpile1.validFoundation(pCard.getValue())){   
                        pCard.setFaceUp(true);
                        foundationPile1.setIcon(pCard.getIcon());
                        pCard.setFaceUp(false);
                        Card ouCard = wastepile1.pop();
                        Card outCard = wastepile1.peek();     
                        if(outCard!=null){
                            wastePileA.setIcon(outCard.getIcon());     
                        }else{
                            wastePileA.setIcon(null);
                        }
                        isSelected2 = false;   
                        wastePileA.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))); 
                        pCard = new Card();
                        System.out.println("Moving card from wastepile1 to foundationPile1");
                        checkWinCon();
                        adjustHelpLabel(jLabel1, funpile1);
                        
                    }else{
                        JOptionPane.showMessageDialog(this, "You cannot move the card this way.");
                    }
                }else if(isSelected3){
                    if(this.funpile1.validFoundation(pCard.getValue())){
                        pCard.setFaceUp(true);
                        foundationPile1.setIcon(pCard.getIcon());
                        pCard.setFaceUp(false);
                        Card ouCard = wastepile2.pop();
                        Card outCard = wastepile2.peek();
                        if(outCard!=null){
                            wastePileB.setIcon(outCard.getIcon());     
                        }else{
                            wastePileB.setIcon(null);
                        }
                        isSelected3 = false;   
                        wastePileB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                        pCard = new Card();
                        System.out.println("Moving card from wastepile2 to foundationPile1");
                        checkWinCon();
                        adjustHelpLabel(jLabel1, funpile1);
                    }else{
                        JOptionPane.showMessageDialog(this, "You cannot move the card this way.");
                    }
                }else if(isSelected4){
                    if(this.funpile1.validFoundation(pCard.getValue())){
                        pCard.setFaceUp(true);
                        foundationPile1.setIcon(pCard.getIcon());
                        pCard.setFaceUp(false);
                        Card ouCard = wastepile3.pop();
                        Card outCard = wastepile3.peek();
                        if(outCard!=null){
                            wastePileC.setIcon(outCard.getIcon());     
                        }else{
                            wastePileC.setIcon(null);
                        }
                        isSelected4 = false;   
                        wastePileC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                        pCard = new Card();
                        System.out.println("Moving card from wastepile3 to foundationPile1");
                        checkWinCon();
                        adjustHelpLabel(jLabel1, funpile1);
                    }else{
                        JOptionPane.showMessageDialog(this, "You cannot move the card this way.");
                    }
                }else if(isSelected5){
                    if(this.funpile1.validFoundation(pCard.getValue())){
                        pCard.setFaceUp(true);
                        foundationPile1.setIcon(pCard.getIcon());
                        pCard.setFaceUp(false);
                        Card ouCard = wastepile4.pop();
                        Card outCard = wastepile4.peek();
                        if(outCard!=null){
                            wastePileD.setIcon(outCard.getIcon());     
                        }else{
                            wastePileD.setIcon(null);
                        }
                        isSelected5 = false;   
                        wastePileD.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                        pCard = new Card();
                        System.out.println("Moving card from wastepile4 to foundationPile1");
                        checkWinCon();
                        adjustHelpLabel(jLabel1, funpile1);
                    }else{
                        JOptionPane.showMessageDialog(this, "You cannot move the card this way.");
                    }
                }
                break;
            case 2:
                if(isSelected1){
                    if(this.funpile2.validFoundation(pCard.getValue())){ 
                        pCard.setFaceUp(true);
                        foundationPile2.setIcon(pCard.getIcon()); 
                        pCard.setFaceUp(false);
                        isSelected1 = false;   
                        stockPile.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))); 
                        stockPile.setIcon(null);
                        pCard = new Card();
                        System.out.println("Moving card from stockPile to foundationPile2");
                        checkWinCon();
                        adjustHelpLabel(jLabel2, funpile2);
                    }else{
                        JOptionPane.showMessageDialog(this, "You cannot move the card this way.");
                    }
                } else if(isSelected2){
                    if(this.funpile2.validFoundation(pCard.getValue())){  
                        pCard.setFaceUp(true);
                        foundationPile2.setIcon(pCard.getIcon());
                        pCard.setFaceUp(false);
                        Card ouCard = wastepile1.pop();
                        Card outCard = wastepile1.peek();     
                        if(outCard!=null){
                            wastePileA.setIcon(outCard.getIcon());     
                        }else{
                            wastePileA.setIcon(null);
                        }
                        isSelected2 = false;   
                        wastePileA.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                        pCard = new Card();
                        System.out.println("Moving card from wastepile1 to foundationPile2");
                        checkWinCon();
                        adjustHelpLabel(jLabel2, funpile2);
                    }else{
                        JOptionPane.showMessageDialog(this, "You cannot move the card this way.");
                    }
                }else if(isSelected3){
                    if(this.funpile2.validFoundation(pCard.getValue())){
                        pCard.setFaceUp(true);
                        foundationPile2.setIcon(pCard.getIcon());
                        pCard.setFaceUp(false);
                        Card ouCard = wastepile2.pop();
                        Card outCard = wastepile2.peek();
                        if(outCard!=null){
                            wastePileB.setIcon(outCard.getIcon());     
                        }else{
                            wastePileB.setIcon(null);
                        }
                        isSelected3 = false;   
                        wastePileB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                        pCard = new Card();
                        System.out.println("Moving card from wastepile2 to foundationPile2");
                        checkWinCon();
                        adjustHelpLabel(jLabel2, funpile2);
                    }else{
                        JOptionPane.showMessageDialog(this, "You cannot move the card this way.");
                    }
                }else if(isSelected4){
                    if(this.funpile2.validFoundation(pCard.getValue())){
                        pCard.setFaceUp(true);
                        foundationPile2.setIcon(pCard.getIcon());
                        pCard.setFaceUp(false);
                        Card ouCard = wastepile3.pop();
                        Card outCard = wastepile3.peek();
                        if(outCard!=null){
                            wastePileC.setIcon(outCard.getIcon());     
                        }else{
                            wastePileC.setIcon(null);
                        }
                        isSelected4 = false;   
                        wastePileC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))); 
                        pCard = new Card();
                        System.out.println("Moving card from wastepile3 to foundationPile2");
                        checkWinCon();
                        adjustHelpLabel(jLabel2, funpile2);
                    }else{
                        JOptionPane.showMessageDialog(this, "You cannot move the card this way.");
                    }
                }else if(isSelected5){
                    if(this.funpile2.validFoundation(pCard.getValue())){
                        pCard.setFaceUp(true);
                        foundationPile2.setIcon(pCard.getIcon());
                        pCard.setFaceUp(false);
                        Card ouCard = wastepile4.pop();
                        Card outCard = wastepile4.peek();
                        if(outCard!=null){
                            wastePileD.setIcon(outCard.getIcon());     
                        }else{
                            wastePileD.setIcon(null);
                        }
                        isSelected5 = false;   
                        wastePileD.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                        pCard = new Card();
                        System.out.println("Moving card from wastepile4 to foundationPile2");
                        checkWinCon();
                        adjustHelpLabel(jLabel2, funpile2);
                    }else{
                        JOptionPane.showMessageDialog(this, "You cannot move the card this way.");
                    }
                }
                break;
            case 3:
                if(isSelected1){
                    if(this.funpile3.validFoundation(pCard.getValue())){ 
                        pCard.setFaceUp(true);
                        foundationPile3.setIcon(pCard.getIcon()); 
                        pCard.setFaceUp(false);
                        isSelected1 = false;   
                        stockPile.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))); 
                        stockPile.setIcon(null);
                        pCard = new Card();
                        System.out.println("Moving card from stockPile to foundationPile3");
                        checkWinCon();
                        adjustHelpLabel(jLabel3, funpile3);
                    }else{
                        JOptionPane.showMessageDialog(this, "You cannot move the card this way.");
                    }
                } else if(isSelected2){
                    if(this.funpile3.validFoundation(pCard.getValue())){   
                        pCard.setFaceUp(true);
                        foundationPile3.setIcon(pCard.getIcon());
                        pCard.setFaceUp(false);
                        Card ouCard = wastepile1.pop();
                        Card outCard = wastepile1.peek();     
                        if(outCard!=null){
                            wastePileA.setIcon(outCard.getIcon());     
                        }else{
                            wastePileA.setIcon(null);
                        }
                        isSelected2 = false;   
                        wastePileA.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                        pCard = new Card();
                        System.out.println("Moving card from wastepile1 to foundationPile3");
                        checkWinCon();
                        adjustHelpLabel(jLabel3, funpile3);
                    }else{
                        JOptionPane.showMessageDialog(this, "You cannot move the card this way.");
                    }
                }else if(isSelected3){
                    if(this.funpile3.validFoundation(pCard.getValue())){
                        pCard.setFaceUp(true);
                        foundationPile3.setIcon(pCard.getIcon());
                        pCard.setFaceUp(false);
                        Card ouCard = wastepile2.pop();
                        Card outCard = wastepile2.peek();
                        if(outCard!=null){
                            wastePileB.setIcon(outCard.getIcon());     
                        }else{
                            wastePileB.setIcon(null);
                        }
                        isSelected3 = false;   
                        wastePileB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                        pCard = new Card();
                        System.out.println("Moving card from wastepile2 to foundationPile3");
                        checkWinCon();
                        adjustHelpLabel(jLabel3, funpile3);
                    }else{
                        JOptionPane.showMessageDialog(this, "You cannot move the card this way.");
                    }
                }else if(isSelected4){
                    if(this.funpile3.validFoundation(pCard.getValue())){
                        pCard.setFaceUp(true);
                        foundationPile3.setIcon(pCard.getIcon());
                        pCard.setFaceUp(false);
                        Card ouCard = wastepile3.pop();
                        Card outCard = wastepile3.peek();
                        if(outCard!=null){
                            wastePileC.setIcon(outCard.getIcon());     
                        }else{
                            wastePileC.setIcon(null);
                        }
                        isSelected4 = false;   
                        wastePileC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                        pCard = new Card();
                        System.out.println("Moving card from wastepile3 to foundationPile3");
                        checkWinCon();
                        adjustHelpLabel(jLabel3, funpile3);
                    }else{
                        JOptionPane.showMessageDialog(this, "You cannot move the card this way.");
                    }
                }else if(isSelected5){
                    if(this.funpile3.validFoundation(pCard.getValue())){
                        pCard.setFaceUp(true);
                        foundationPile3.setIcon(pCard.getIcon());
                        pCard.setFaceUp(false);
                        Card ouCard = wastepile4.pop();
                        Card outCard = wastepile4.peek();
                        if(outCard!=null){
                            wastePileD.setIcon(outCard.getIcon());     
                        }else{
                            wastePileD.setIcon(null);
                        }
                        isSelected5 = false;   
                        wastePileD.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                        pCard = new Card();
                        System.out.println("Moving card from wastepile4 to foundationPile3");
                        checkWinCon();
                        adjustHelpLabel(jLabel3, funpile3);
                    }else{
                        JOptionPane.showMessageDialog(this, "You cannot move the card this way.");
                    }
                }
                break;
            case 4:
                if(isSelected1){
                    if(this.funpile4.validFoundation(pCard.getValue())){ 
                        pCard.setFaceUp(true);
                        foundationPile4.setIcon(pCard.getIcon()); 
                        pCard.setFaceUp(false);
                        isSelected1 = false;   
                        stockPile.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                        stockPile.setIcon(null);
                        pCard = new Card();
                        System.out.println("Moving card from stockPile to foundationPile4");
                        checkWinCon();
                        adjustHelpLabel(jLabel4, funpile4);
                    }else{
                        JOptionPane.showMessageDialog(this, "You cannot move the card this way.");
                    }
                } else if(isSelected2){
                    if(this.funpile4.validFoundation(pCard.getValue())){ 
                        pCard.setFaceUp(true);
                        foundationPile4.setIcon(pCard.getIcon());
                        pCard.setFaceUp(false);
                        Card ouCard = wastepile1.pop();
                        Card outCard = wastepile1.peek();     
                        if(outCard!=null){
                            wastePileA.setIcon(outCard.getIcon());     
                        }else{
                            wastePileA.setIcon(null);
                        }
                        isSelected2 = false;   
                        wastePileA.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                        pCard = new Card();
                        System.out.println("Moving card from wastepile1 to foundationPile4");
                        checkWinCon();
                        adjustHelpLabel(jLabel4, funpile4);
                    }else{
                        JOptionPane.showMessageDialog(this, "You cannot move the card this way.");
                    }
                }else if(isSelected3){
                    if(this.funpile4.validFoundation(pCard.getValue())){
                        pCard.setFaceUp(true);
                        foundationPile4.setIcon(pCard.getIcon());
                        pCard.setFaceUp(false);
                        Card ouCard = wastepile2.pop();
                        Card outCard = wastepile2.peek();
                        if(outCard!=null){
                            wastePileB.setIcon(outCard.getIcon());     
                        }else{
                            wastePileB.setIcon(null);
                        }
                        isSelected3 = false;   
                        wastePileB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                        pCard = new Card();
                        System.out.println("Moving card from wastepile2 to foundationPile4");
                        checkWinCon();
                        adjustHelpLabel(jLabel4, funpile4);
                    }else{
                        JOptionPane.showMessageDialog(this, "You cannot move the card this way.");
                    }
                }else if(isSelected4){
                    if(this.funpile4.validFoundation(pCard.getValue())){
                        pCard.setFaceUp(true);
                        foundationPile4.setIcon(pCard.getIcon());
                        pCard.setFaceUp(false);
                        Card ouCard = wastepile3.pop();
                        Card outCard = wastepile3.peek();
                        if(outCard!=null){
                            wastePileC.setIcon(outCard.getIcon());     
                        }else{
                            wastePileC.setIcon(null);
                        }
                        isSelected4 = false;   
                        wastePileC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                        pCard = new Card();
                        System.out.println("Moving card from wastepile3 to foundationPile4");
                        checkWinCon();
                        adjustHelpLabel(jLabel4, funpile4);
                    }else{
                        JOptionPane.showMessageDialog(this, "You cannot move the card this way.");
                    }
                }else if(isSelected5){
                    if(this.funpile4.validFoundation(pCard.getValue())){
                        pCard.setFaceUp(true);
                        foundationPile4.setIcon(pCard.getIcon());
                        pCard.setFaceUp(false);
                        Card ouCard = wastepile4.pop();
                        Card outCard = wastepile4.peek();
                        if(outCard!=null){
                            wastePileD.setIcon(outCard.getIcon());     
                        }else{
                            wastePileD.setIcon(null);
                        }
                        isSelected5 = false;   
                        wastePileD.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                        pCard = new Card();
                        System.out.println("Moving card from wastepile4 to foundationPile4");
                        checkWinCon();
                        adjustHelpLabel(jLabel4, funpile4);
                    }else{
                        JOptionPane.showMessageDialog(this, "You cannot move the card this way.");
                    }
                }
                break;
            default:
                System.err.println("Wrong Code");
        }
    }
    
    public void deselectWastePiles() {
        if (isSelected2) {
            isSelected2 = false;
            wastePileA.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        } else if (isSelected3) {
            isSelected3 = false;
            wastePileB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        } else if (isSelected4) {
            isSelected4 = false;
            wastePileC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        } else if (isSelected5) {
            isSelected5 = false;
            wastePileD.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        }
    }
    
    public void adjustHelpLabel(JLabel label, FoundationPile fPile){
        String temp;
        String labelText = "<html><strike>";
        
        if(fPile.geti() == 13){
            for(int i = 1; i <= 13; i++){
                temp = getRankFor(fPile.getMyPileAt(i-1));
                labelText = labelText + temp + " ";
            }
            labelText = labelText + "</strike>";
        }
        else{
            for(int i = 1; i <= 13; i++){
                if(i == fPile.geti()+1)
                    temp = "</strike> <b>" + getRankFor(fPile.getMyPileAt(i-1)) + "</b>";
                else
                    temp = getRankFor(fPile.getMyPileAt(i-1));
                labelText = labelText + temp + " ";
            }  
        }
        labelText = labelText + "</html>";
        label.setText(labelText);
    }
    
    public String getRankFor(int i){
        if(i == 1)
            return "A";
        else if(i == 2)
            return "2";
        else if(i == 3)
            return "3";
        else if(i == 4)
            return "4";
        else if(i == 5)
            return "5";
        else if(i == 6)
            return "6";
        else if(i == 7)
            return "7";
        else if(i == 8)
            return "8";
        else if(i == 9)
            return "9";
        else if(i == 10)
            return "10";
        else if(i == 11)
            return "J";
        else if(i == 12)
            return "Q";
        else if(i == 13)
            return "K";
        else 
            return "0";
    }

    private Deck deck;
    private Card stockCard;
    private Card wasteCard;
    private Card foundationCard;
    private Card pCard;
    private int[] funpile;
    private FoundationPile funpile1;
    private FoundationPile funpile2;
    private FoundationPile funpile3;
    private FoundationPile funpile4;
    private boolean isSelected1;
    private boolean isSelected2;
    private boolean isSelected3;
    private boolean isSelected4;
    private boolean isSelected5;
    private WastePile wastepile1;
    private WastePile wastepile2;
    private WastePile wastepile3;
    private WastePile wastepile4;
    private Point p;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel deckPile;
    private javax.swing.JButton exitBtn;
    private javax.swing.JLabel foundationPile1;
    private javax.swing.JLabel foundationPile2;
    private javax.swing.JLabel foundationPile3;
    private javax.swing.JLabel foundationPile4;
    private javax.swing.JButton helpBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton resetBtn;
    private javax.swing.JLabel stockPile;
    private javax.swing.JLabel wastePileA;
    private javax.swing.JLabel wastePileB;
    private javax.swing.JLabel wastePileC;
    private javax.swing.JLabel wastePileD;
    // End of variables declaration//GEN-END:variables
}
